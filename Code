local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

Notification:Notify(
    {Title = "Thank You for Using Rinns Hub", Description = "Join The Discord server to report any bugs or give suggestions https://discord.com/invite/x55Rw6PD7x"},
    {OutlineColor = Color3.fromRGB(80, 80, 80), Time = 8, Type = "option"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
)

Notification:Notify(
    {Title = "IMPORTANT", Description = "If any of the toggles are already green you have to turn it off by clicking it and turning it back on by clicking it again for the feature to work"},
    {OutlineColor = Color3.fromRGB(80, 80, 80), Time = 8, Type = "option"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
)

local window = DrRayLibrary:Load("Rinns Hub", "Default")

local tab = DrRayLibrary.newTab("Main Tab", "ImageIdHere")

local autoAttackRange = 13
local autoBlockRange = 13
local autoAttackEnabled = false
local autoBlockEnabled = false
local aimbotEnabled = false
local aimbotCircleSize = 100

-- Function to check for players within a given range
local function isPlayerInRange(range)
    local localPlayer = game.Players.LocalPlayer
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude
            if distance <= range then
                return true
            end
        end
    end
    return false
end

-- Auto Attack Toggle
tab.newToggle("Auto Attack", "Automatically attacks when a player is in range", false, function(toggleState)
    autoAttackEnabled = toggleState
    if autoAttackEnabled then
        spawn(function()
            while autoAttackEnabled do
                if isPlayerInRange(autoAttackRange) then
                    local args = {
                        [1] = {
                            ["Goal"] = "LeftClick",
                            ["Mobile"] = true
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                end
                wait(0.6)
            end
        end)
    end
end)

-- Auto Attack Range Slider
tab.newSlider("Auto Attack Range", "Change the range of the Auto Attack", 30, false, function(num)
    autoAttackRange = num
end)

-- Auto Block Toggle
tab.newToggle("Auto Block", "Blocks for you when a player is in range", false, function(toggleState)
    autoBlockEnabled = toggleState
    local autoBlockActive = false

    if autoBlockEnabled then
        local args = {
            [1] = {
                ["Goal"] = "KeyRelease",
                ["Key"] = Enum.KeyCode.F
            }
        }
        game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
    end

    local function getNil(name, class)
        for _, v in next, getnilinstances() do
            if v.ClassName == class and v.Name == name then
                return v
            end
        end
    end

    spawn(function()
        while autoBlockEnabled do
            if isPlayerInRange(autoBlockRange) then
                if not autoBlockActive then
                    local args = {
                        [1] = {
                            ["Goal"] = "KeyPress",
                            ["Key"] = Enum.KeyCode.F
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                    autoBlockActive = true
                end
            else
                if autoBlockActive then
                    local args = {
                        [1] = {
                            ["Goal"] = "KeyRelease",
                            ["Key"] = Enum.KeyCode.F
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                    autoBlockActive = false
                end
            end

            -- Detect specific movement and respond
            local bv = getNil("moveme", "BodyVelocity")
            if bv then
                local args = {
                    [1] = {
                        ["Goal"] = "delete bv",
                        ["BV"] = bv
                    }
                }
                game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
            end

            wait(0.1)
        end
    end)
end)

-- Auto Block Range Slider
tab.newSlider("Auto Block Range", "Change the range of the Auto Block", 30, false, function(num)
    autoBlockRange = num
end)

-- No Stun Button
tab.newButton("No Stun", "Disables or reduces stun effects only click once", function()
    local function isNumber(str)
        return tonumber(str) ~= nil or str == 'inf'
    end

    local tspeed = 0.3
    local hb = game:GetService("RunService").Heartbeat
    local tpwalking = true
    local player = game:GetService("Players")
    local lplr = player.LocalPlayer
    local chr = lplr.Character
    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")

    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
        if hum.MoveDirection.Magnitude > 0 then
            if tspeed and isNumber(tspeed) then
                chr:TranslateBy(hum.MoveDirection * tonumber(tspeed))
            else
                chr:TranslateBy(hum.MoveDirection)
            end
        end
    end
end)

-- New Text Input for Combo Maker
tab.newInput("Combo Maker", "Enter your combo commands here (punch();wait(x);firstskill();secondskill();thirdskill();fourthskill();dash();downslam();moveforward();movebackward())", function(text)
    print("Entered text: " .. text)

    -- Create a new tool when input is finished
    local localPlayer = game.Players.LocalPlayer
    local tool = Instance.new("Tool")
    tool.Name = "Combo Tool"
    tool.RequiresHandle = false
    tool.CanBeDropped = false

    -- Function to execute commands
    local function executeCommands()
        spawn(function()
            local toolNames = {
                ["firstskill()"] = {"Normal Punch", "Flowing Water", "Machine Gun Blows", "Flash Stirke", "Homerun", "Quick Slice", "Crushing Pull"},
                ["secondskill()"] = {"Atmos Cleave", "Windstorm Fury", "Ignition Burst", "Whirlwind Kick", "Beatdown", "Consecutive Punches", "Lethal Whirlwind Stream"},
                ["thirdskill()"] = {"Pinpoint Cut", "Stone Coffin", "Blitz Shot", "Scatter", "Grand Slam", "Shove", "Hunter's Grasp"},
                ["fourthskill()"] = {"Split Second Counter", "Expulsive Push", "Jet Dive", "Explosive Shuriken", "Foul Ball", "Uppercut", "Prey's Peril"}
            }

            for command in string.gmatch(text, "%S+") do
                if toolNames[command] then
                    for _, toolName in ipairs(toolNames[command]) do
                        local tool = localPlayer.Backpack:FindFirstChild(toolName) or localPlayer.Character:FindFirstChild(toolName)
                        if tool then
                            tool.Parent = localPlayer.Character
                            local args = {
                                [1] = {
                                    ["Goal"] = "LeftClick",
                                    ["Mobile"] = true
                                }
                            }
                            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

                            local argsRelease = {
                                [1] = {
                                    ["Goal"] = "LeftClickRelease",
                                    ["Mobile"] = true
                                }
                            }
                            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(argsRelease))
                            tool.Parent = localPlayer.Backpack
                            break
                        end
                    end
                elseif command:match("^wait%((%d+%.?%d*)%)$") then
                    local waitTime = tonumber(command:match("%d+%.?%d*"))
                    wait(waitTime)
                elseif command == "punch()" then
                    local args = {
                        [1] = {
                            ["Goal"] = "LeftClick",
                            ["Mobile"] = true
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

                    local argsRelease = {
                        [1] = {
                            ["Goal"] = "LeftClickRelease",
                            ["Mobile"] = true
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(argsRelease))
                elseif command == "dash()" then
                    local args = {
                        [1] = {
                            ["Goal"] = "Dash"
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                elseif command == "downslam()" then
                    local args = {
                        [1] = {
                            ["Goal"] = "DownSlam"
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                elseif command == "moveforward()" then
                    local args = {
                        [1] = {
                            ["Goal"] = "MoveF"
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                elseif command == "movebackward()" then
                    local args = {
                        [1] = {
                            ["Goal"] = "MoveB"
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                end
            end
        end)
    end

    tool.Activated:Connect(executeCommands)
    tool.Parent = localPlayer.Backpack
end)

-- Toggle for Aimbot
tab.newToggle("Aimbot", "Enables Aimbot to target the nearest player", false, function(toggleState)
    aimbotEnabled = toggleState
    if aimbotEnabled then
        local camera = game.Workspace.CurrentCamera
        local localPlayer = game.Players.LocalPlayer

        local circle = Drawing.new("Circle")
        circle.Thickness = 2
        circle.Transparency = 1
        circle.Color = Color3.fromRGB(255, 255, 255)
        circle.NumSides = 100
        circle.Filled = false

        game:GetService("RunService").RenderStepped:Connect(function()
            if aimbotEnabled then
                circle.Visible = true
                circle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                circle.Radius = aimbotCircleSize

                local closestPlayer = nil
                local shortestDistance = aimbotCircleSize

                for _, player in ipairs(game.Players:GetPlayers()) do
                    if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local screenPoint, onScreen = camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                        if onScreen then
                            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - circle.Position).magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                closestPlayer = player
                            end
                        end
                    end
                end

                if closestPlayer then
                    camera.CFrame = CFrame.new(camera.CFrame.Position, closestPlayer.Character.HumanoidRootPart.Position)
                end
            else
                circle.Visible = false
            end
        end)
    end
end)

-- Slider for Aimbot Circle Size
tab.newSlider("Aimbot Circle Size", "Change the size of the Aimbot circle", 300, false, function(num)
    aimbotCircleSize = num
end)

-- Misc Tab for new toggle
local tab = DrRayLibrary.newTab("Misc Tab", "ImageIdHere")

-- Teleport to Safe Place Toggle
local teleportEnabled = false
local originalPosition = nil

tab.newToggle("Teleport to Safe Place When Low", "Teleports you to a safe place when health is low", false, function(toggleState)
    teleportEnabled = toggleState
    if teleportEnabled then
        game:GetService("RunService").RenderStepped:Connect(function()
            if teleportEnabled then
                local localPlayer = game.Players.LocalPlayer
                if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
                    local health = localPlayer.Character.Humanoid.Health
                    if health < 15 then
                        if not originalPosition then
                            originalPosition = localPlayer.Character.HumanoidRootPart.Position
                        end
                        localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, 100, 0))
                    elseif health > 35 and originalPosition then
                        localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(originalPosition)
                        originalPosition = nil
                    end
                end
            end
        end)
    end
end)

-- Add ESP tab and toggles
local espTab = DrRayLibrary.newTab("ESP Tab", "ImageIdHere")
local boxEspEnabled = false
local nameEspEnabled = false
local tracersEspEnabled = false
local ultimateEspEnabled = false

-- Function to create an outline around a player
local function createOutline(player)
    if player ~= game.Players.LocalPlayer and player.Character then
        for _, part in pairs(player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                local highlight = Instance.new("SelectionBox")
                highlight.Adornee = part
                highlight.LineThickness = 0.05
                highlight.Color3 = Color3.new(1, 1, 1)  -- White color
                highlight.SurfaceTransparency = 0.8
                highlight.Name = "ESPOutline"
                highlight.Parent = part
            end
        end
    end
end

-- Function to remove the outline from a player
local function removeOutline(player)
    if player.Character then
        for _, part in pairs(player.Character:GetChildren()) do
            if part:IsA("BasePart") and part:FindFirstChild("ESPOutline") then
                part:FindFirstChild("ESPOutline"):Destroy()
            end
        end
    end
end

-- Function to create or update billboards for players
local function updateBillboard(player, text, guiName, textLabelName, offset)
    if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local billboardGui = player.Character:FindFirstChild(guiName)

        if not billboardGui then
            billboardGui = Instance.new("BillboardGui")
            billboardGui.Name = guiName
            billboardGui.AlwaysOnTop = true
            billboardGui.Size = UDim2.new(4, 0, 1, 0) -- Larger size for text
            billboardGui.StudsOffset = offset -- Dynamic offset

            local textLabel = Instance.new("TextLabel")
            textLabel.Name = textLabelName
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
            textLabel.TextScaled = true
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.Parent = billboardGui

            billboardGui.Parent = player.Character:FindFirstChild("HumanoidRootPart")
        end

        local textLabel = billboardGui:FindFirstChild(textLabelName)
        if textLabel then
            textLabel.Text = text
        end
    end
end

-- Function to remove billboards for players
local function removeBillboard(player, guiName)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local billboardGui = player.Character:FindFirstChild(guiName)
        if billboardGui then
            billboardGui:Destroy()
        end
    end
end

-- Function to create tracers
local function createTracer(player)
    if player ~= game.Players.LocalPlayer then
        local localPlayer = game.Players.LocalPlayer
        local line = Drawing.new("Line")
        line.Thickness = 2
        line.Color = Color3.new(1, 1, 1) -- White color
        line.Transparency = 1

        local function updateTracer()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local playerPos = player.Character.HumanoidRootPart.Position
                local localPos = localPlayer.Character.HumanoidRootPart.Position
                local screenPosPlayer, onScreenPlayer = workspace.CurrentCamera:WorldToViewportPoint(playerPos)
                local screenPosLocal, onScreenLocal = workspace.CurrentCamera:WorldToViewportPoint(localPos)

                if onScreenPlayer and onScreenLocal then
                    line.From = Vector2.new(screenPosLocal.X, screenPosLocal.Y)
                    line.To = Vector2.new(screenPosPlayer.X, screenPosPlayer.Y)
                    line.Visible = true
                else
                    line.Visible = false
                end
            else
                line.Visible = false
            end
        end

        game:GetService("RunService").RenderStepped:Connect(updateTracer)
    end
end

-- Function to remove tracers
local function removeTracer()
    for _, obj in pairs(Drawing.GetDrawings()) do
        if obj.Type == "Line" then
            obj:Remove()
        end
    end
end

-- Box ESP Toggle
espTab.newToggle("Box ESP", "Shows an outline around players", false, function(toggleState)
    boxEspEnabled = toggleState

    if boxEspEnabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            createOutline(player)
        end

        game.Players.PlayerAdded:Connect(createOutline)
    else
        for _, player in pairs(game.Players:GetPlayers()) do
            removeOutline(player)
        end
    end
end)

-- Name ESP Toggle
espTab.newToggle("Name ESP", "Shows the names of players", false, function(toggleState)
    nameEspEnabled = toggleState

    local function updateNameEsp()
        for _, player in pairs(game.Players:GetPlayers()) do
            updateBillboard(player, player.Name, "NameEspBillboard", "NameEspText", Vector3.new(0, 3, 0))
        end
    end

    if nameEspEnabled then
        spawn(function()
            while nameEspEnabled do
                updateNameEsp()
                wait(1)
            end
        end)
    else
        for _, player in pairs(game.Players:GetPlayers()) do
            removeBillboard(player, "NameEspBillboard")
        end
    end
end)

-- Tracers ESP Toggle
espTab.newToggle("Tracers ESP", "Draws lines to players", false, function(toggleState)
    tracersEspEnabled = toggleState

    if tracersEspEnabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            createTracer(player)
        end

        game.Players.PlayerAdded:Connect(createTracer)
    else
        removeTracer()
    end
end)

-- Ultimate ESP Toggle
espTab.newToggle("Ultimate ESP", "Shows a label above players with certain tools", false, function(toggleState)
    ultimateEspEnabled = toggleState

    local function updateUltimateEsp()
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hasUltimateTool = false
                for _, toolName in pairs({"Table Flip", "Serious Punch", "Crushed Rock", "The Final Hunt", "Flamewave Cannon", "Incinerate", "Evil God's Terror", "Chaos Orb", "Entangle"}) do
                    if player.Backpack:FindFirstChild(toolName) or player.Character:FindFirstChild(toolName) then
                        hasUltimateTool = true
                        break
                    end
                end

                if hasUltimateTool then
                    updateBillboard(player, "⚠️", "UltimateEspBillboard", "UltimateEspText", Vector3.new(0, 4, 0))
                else
                    removeBillboard(player, "UltimateEspBillboard")
                end
            end
        end
    end

    if ultimateEspEnabled then
        spawn(function()
            while ultimateEspEnabled do
                updateUltimateEsp()
                wait(1)
            end
        end)
    else
        for _, player in pairs(game.Players:GetPlayers()) do
            removeBillboard(player, "UltimateEspBillboard")
        end
    end
end)
